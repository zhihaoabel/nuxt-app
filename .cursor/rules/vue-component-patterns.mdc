---
description: 
globs: 
alwaysApply: false
---
# Vue Component Patterns & Conventions

## Component Structure

### Single File Components
- Use `.vue` extension for all components
- Follow the structure seen in existing components like [components/ExampleComponent.vue](mdc:components/ExampleComponent.vue)
- Order: `<template>`, `<script setup>`, `<style>`

### Script Setup Pattern
```vue
<script setup lang="ts">
// Imports
// Props/Emits definitions
// Reactive state
// Computed properties
// Methods
// Lifecycle hooks
</script>
```

## Component Examples

### Current Components
- [components/AdvancedThemeConfigurator.vue](mdc:components/AdvancedThemeConfigurator.vue) - Complex theme configuration with 202 lines
  - Demonstrates advanced UI patterns with color selection, radius options, and theme switching
  - Uses composables for theme management (`useThemeConfig`, `useColorMode`)
  - Complex grid layouts and responsive design
- [components/ExampleComponent.vue](mdc:components/ExampleComponent.vue) - UI component showcase with 86 lines
  - Demonstrates various Nuxt UI components: buttons, icons, inputs, cards, notifications
  - Shows proper usage of `useToast` composable
  - Examples of different button variants and form elements

### Component Composition
- Use Composition API with `<script setup>`
- Leverage Vue 3 reactivity system
- Follow patterns established in existing components

## Props & Events

### Props Definition
```typescript
interface Props {
  // Define prop types explicitly
}

const props = defineProps<Props>()
```

### Events Definition
```typescript
interface Emits {
  // Define event types
}

const emit = defineEmits<Emits>()
```

## Styling Conventions

### Tailwind CSS Integration
- Use Tailwind utility classes for styling
- Follow patterns from [components/ExampleComponent.vue](mdc:components/ExampleComponent.vue)
- Leverage responsive design classes (`sm:`, `md:`, `lg:`)
- Use dark mode variants (`dark:`)

### Custom CSS Classes
- Utilize custom classes defined in [assets/css/main.css](mdc:assets/css/main.css):
  - `.shadow-glow`, `.shadow-soft` for enhanced shadow effects
  - `.hover-lift` for hover animations
  - `.gradient-border` for gradient border effects
- Follow the existing CSS variable system (`--ui-primary`, `--ui-radius`)

### Scoped Styles
- Use `<style scoped>` for component-specific styles when needed
- Prefer Tailwind classes over custom CSS
- Follow existing styling patterns from current components

### Theme Integration
- Respect color mode settings with `dark:` variants
- Use CSS custom properties for theming
- Follow patterns from [components/AdvancedThemeConfigurator.vue](mdc:components/AdvancedThemeConfigurator.vue)

## Component Organization

### Directory Structure
- Place components in [components/](mdc:components)
- Global components in [components/global/](mdc:components/global)
- Group related components in subdirectories

### Naming Conventions
- PascalCase for component files
- Descriptive, meaningful names
- Avoid generic names like "Component" or "Item"
- Examples: `AdvancedThemeConfigurator`, `ExampleComponent`

## Nuxt UI Component Usage

### Common Patterns
Based on [components/ExampleComponent.vue](mdc:components/ExampleComponent.vue):

```vue
<!-- Buttons with variants -->
<UButton color="primary">Primary Button</UButton>
<UButton variant="outline">Outline Button</UButton>
<UButton variant="ghost">Ghost Button</UButton>

<!-- Form elements -->
<UInput placeholder="Enter text" />
<UTextarea placeholder="Enter multiline text" />
<USelect :options="selectOptions" placeholder="Choose option" />

<!-- Cards with slots -->
<UCard>
  <template #header>Card Header</template>
  Card Content
  <template #footer>Card Footer</template>
</UCard>

<!-- Icons -->
<UIcon name="heroicons:heart" class="text-red-500" />
```

### Advanced Patterns
From [components/AdvancedThemeConfigurator.vue](mdc:components/AdvancedThemeConfigurator.vue):

```vue
<!-- Dynamic button states -->
<UButton 
  :variant="isActive ? 'solid' : 'outline'"
  :color="isActive ? 'primary' : 'neutral'"
  @click="handleAction">
  Dynamic Button
</UButton>

<!-- Grid layouts with responsive design -->
<div class="grid grid-cols-2 sm:grid-cols-3 gap-2">
  <!-- Grid items -->
</div>
```

## Composables Integration

### Using Composables
- Import from [composables/](mdc:composables) directory
- Auto-imported by Nuxt
- Follow Vue 3 composable patterns

### Common Composables
```typescript
// Theme management
const colorMode = useColorMode()
const themeConfig = useThemeConfig()

// Notifications
const toast = useToast()

// Routing
const route = useRoute()
const router = useRouter()
```

### State Management
- Use reactive state within components
- Share state via composables when needed
- Avoid prop drilling for deeply nested data

## TypeScript Integration

### Type Safety
- Use TypeScript for all components
- Define interfaces for props and emits
- Leverage Vue 3 + TypeScript features

### Component Types
```typescript
// For component references
import type { ComponentInstance } from 'vue'
```

## Performance Considerations

### Lazy Loading
- Use dynamic imports for large components
- Consider component splitting for better performance

### Reactivity
- Use `ref()` for primitive values
- Use `reactive()` for objects
- Use `computed()` for derived state

## Testing Patterns

### Component Testing
- Test component behavior, not implementation
- Focus on user interactions and outputs
- Mock external dependencies

## Integration with Nuxt Features

### Auto-Import
- Components are automatically imported
- No need for explicit imports in templates
- Follow the auto-import conventions

### Server-Side Rendering
- Ensure components work with SSR
- Handle client-only code appropriately
- Use `<ClientOnly>` when necessary

### Content Integration
- Components can be used in Markdown files with MDC syntax
- Follow content integration patterns for interactive documentation
